/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mergesort;
import java.util.Arrays;
import java.util.Scanner;
/**
 *
 * @author legon
 */
public class MergeSort {

    /**
     * @param args the command line arguments
     */
    void merge(int arr[], int l, int m, int r)
    {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];
 
        for (int i = 0; i < n1; ++i){
            L[i] = arr[l + i];
        }
        
        for (int j = 0; j < n2; ++j){
            R[j] = arr[m + 1 + j];
        }
 
        int i = 0, j = 0;
 
        
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
 
        
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
 
        
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
 
   
    void sort(int arr[], int l, int r)
    {
        if (l < r) {
            //  middle point
            int m = (l + r) / 2;
 
            // Sort first and second halves
            sort(arr, l, m);
            sort(arr, m + 1, r);
 
            // Merge halves
            merge(arr, l, m, r);
        }
    }
    static void printArray(int arr[])
        {
         int n = arr.length;
         for(int i = 0; i < n; i++){
             System.out.println(arr[i] + " ");
         }
         System.out.println();
        }
    public static void main(String[] args) {
        //MergeSort Player = new MergeSort();
        //Player[] arr; //{32, 12, 43, 53, 64};
        //arr = new Player[5];
        //arr[0] = new Player(32);
        //arr[1] = new Player(12);
        //arr[2] = new Player(43);
        //arr[3] = new Player(53);
        //arr[4] = new Player(64);
        
        int Player[] = {32, 12, 43, 53, 64};
        System.out.println(Arrays.toString(Player));
        MergeSort ar = new MergeSort();
        ar.sort(Player, 0, Player.length -1);
        System.out.println(Arrays.toString(Player));
        MergeSort sea = new MergeSort();
        Scanner scan = new Scanner(System.in);
        System.out.println("What age are you looking for?");
        int x = scan.nextInt();
        int n =Player.length;
        
        int result = sea.binarySearch(Player, 0, n-1, x);
        if(result == -1){
            System.out.println("Not here");
        }
        else{
            System.out.println("It is here at index " + result);
        }
    }
    int binarySearch(int arr[], int l, int r, int x) 
    { 
        if (r >= l) { 
            int mid = l + (r - l) / 2; 
  
          
            if (arr[mid] == x) 
                return mid; 
  
            
            if (arr[mid] > x) 
                return binarySearch(arr, l, mid - 1, x); 
  
            
            return binarySearch(arr, mid + 1, r, x); 
        } 
  
       //if this returns its not here
        return -1; 
    } 
}

/*        
    }
class Player
{
    public int age;
    Player(int age)
    {
        this.age = age;
    }
}*/
    

