/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package driver;
import java.util.Random;
import java.util.Arrays;
public class Driver 
{
    private static int[] anArray;
	public static void main(String[] args) 
	{
		WorkerBee wb1 = new WorkerBee("WB1");
		WorkerBee wb2 = new WorkerBee("WB2");
                Random rand = new Random(100);
		anArray = new int[10];
                for(int i = 0; i < 10; i++)
                {
                    anArray[i] = rand.nextInt(100);
                }
                System.out.print(Arrays.toString(anArray));
                
		
		wb1.start(); //this does NOT BLOCK the next line
		wb2.start();
		//wb3.start();
		
		System.out.println("******************** " + Thread.activeCount() + "***************");
		try
		{
			wb1.join();
			wb2.join();
			//wb3.join();
			
			//what if I don't want the code below to execute until all 3 threads above are done
			for(int i = 0; i < 1000; i++)
			{
				//System.out.println("WOOT");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
        void merge(int arr[], int l, int m, int r)
    {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];
 
        for (int i = 0; i < n1; ++i){
            L[i] = arr[l + i];
        }
        
        for (int j = 0; j < n2; ++j){
            R[j] = arr[m + 1 + j];
        }
 
        int i = 0, j = 0;
 
        
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
 
        
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
 
        
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
 
   
    void sort(int arr[], int l, int r)
    {
        if (l < r) {
            //  middle point
            int m = (l + r) / 2;
 
            // Sort first and second halves
            sort(arr, l, m);
            sort(arr, m + 1, r);
 
            // Merge halves
            merge(arr, l, m, r);
        }
    }
    static void printArray(int arr[])
        {
         int n = arr.length;
         for(int i = 0; i < n; i++){
             System.out.println(arr[i] + " ");
         }
         System.out.println();
        }

}
